import{_ as s,c as a,o as i,a8 as t}from"./chunks/framework.Uk78KS4B.js";const E=JSON.parse('{"title":"Canvas绘图基础","description":"","frontmatter":{},"headers":[],"relativePath":"canvas/2.canvas绘图基础.md","filePath":"canvas/2.canvas绘图基础.md"}'),n={name:"canvas/2.canvas绘图基础.md"},e=t(`<h1 id="canvas绘图基础" tabindex="-1">Canvas绘图基础 <a class="header-anchor" href="#canvas绘图基础" aria-label="Permalink to &quot;Canvas绘图基础&quot;">​</a></h1><h3 id="_1-canvas-标签" tabindex="-1">1. Canvas 标签 <a class="header-anchor" href="#_1-canvas-标签" aria-label="Permalink to &quot;1. Canvas 标签&quot;">​</a></h3><h4 id="_1-1-canvas-标签语法和属性-重点" tabindex="-1">1.1 Canvas 标签语法和属性(重点) <a class="header-anchor" href="#_1-1-canvas-标签语法和属性-重点" aria-label="Permalink to &quot;1.1 Canvas 标签语法和属性(重点)&quot;">​</a></h4><p>canvas：画布油布的意思</p><p>标签名 canvas，需要进行闭合。就是一个普通的 html 标签</p><p>可以是在 width 和 height 属性，但是<strong>属性值单位必须是 px</strong>，否则忽略。</p><p>width 和 height：默认是 300*150像素</p><p>注意</p><ul><li>不要用 CSS 控制它的宽和高，会造成图片拉伸</li><li>重置设置 canvas 标签的宽高属性会让画布擦除所有的内容</li><li>可以给 canvas 画布设置背景色</li></ul><h4 id="_1-2-浏览器不兼容处理" tabindex="-1">1.2 浏览器不兼容处理 <a class="header-anchor" href="#_1-2-浏览器不兼容处理" aria-label="Permalink to &quot;1.2 浏览器不兼容处理&quot;">​</a></h4><ol><li><p>IE9 以上才支持 canvas，其他 chrome、Firefox、苹果浏览器等都支持</p></li><li><p>只要浏览器兼容 canvas，那么就会支持绝大部分 API(个别最新 api 除外)</p></li><li><p>移动端的兼容情况非常理想，基本上随便使用</p></li><li><p>2d 的支持都非常好，3d(webgl) IE11 才支持，其他都支持</p></li><li><p>如果浏览器不兼容，最好进行友好提示</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">canvas</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cavsElm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	你的浏览器不支持 canvas，请升级浏览器。浏览器不支持，显示此行文本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">canvas</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p>浏览器不兼容，可以使用_flash_等手段进行优雅降级</p></li></ol><h3 id="_2-canvas绘图上下文-context" tabindex="-1">2 Canvas绘图上下文 Context <a class="header-anchor" href="#_2-canvas绘图上下文-context" aria-label="Permalink to &quot;2 Canvas绘图上下文 Context&quot;">​</a></h3><h4 id="_2-1-context-canvas-的上下文、绘制环境" tabindex="-1">2.1 Context： Canvas 的上下文、绘制环境 <a class="header-anchor" href="#_2-1-context-canvas-的上下文、绘制环境" aria-label="Permalink to &quot;2.1 Context： Canvas 的上下文、绘制环境&quot;">​</a></h4><p><strong>上下文</strong>：上知天文，下知地理。是所有的绘制操作 api 的入口或者集合。</p><p>Canvas 自身无法绘制任何内容。Canvas 的绘图是使用 JavaScript 操作的。</p><p>Context 对象就是 JavaScript 操作 Canvas 的接口。使用*[canvasElement].getContext(&#39;2d&#39;)*来获取 2d 绘图上下文。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> canvas </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cavsElm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取画布</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> canvas.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2d&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注意：2d 小写 3d:webgl</span></span></code></pre></div><h3 id="_3-基本绘制路径" tabindex="-1">3.基本绘制路径 <a class="header-anchor" href="#_3-基本绘制路径" aria-label="Permalink to &quot;3.基本绘制路径&quot;">​</a></h3><h4 id="_3-1-canvas-坐标系" tabindex="-1">3.1 Canvas 坐标系 <a class="header-anchor" href="#_3-1-canvas-坐标系" aria-label="Permalink to &quot;3.1 Canvas 坐标系&quot;">​</a></h4><p>canvas 坐标系，从最左上角 0,0 开始。x 向右增大，y 向下增大</p><p><img src="https://raw.githubusercontent.com/xuchp/typora-pics/main/canvas/image-20240527174058188.png" alt="image-20240527174058188"></p><h4 id="_3-2设置绘制起始点" tabindex="-1">3.2设置绘制起始点 <a class="header-anchor" href="#_3-2设置绘制起始点" aria-label="Permalink to &quot;3.2设置绘制起始点&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">moveTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x,y)</span></span></code></pre></div><p>解释：设置上下文绘制路径的起点。相当于移动画笔到某个位置</p><p>参数：x，y都是相对于 canvas 盒子的最左上角</p><p>注意：<strong>绘制线段钱必须先设置起点</strong></p><h4 id="_3-3-绘制直线" tabindex="-1">3.3 绘制直线 <a class="header-anchor" href="#_3-3-绘制直线" aria-label="Permalink to &quot;3.3 绘制直线&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lineTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x,y)</span></span></code></pre></div><p>解释：从x,y的位置绘制一条直线到起点或者上一个线头点。</p><p>参数：x,y 线头点坐标。</p><h4 id="_3-4-路径开始和闭合" tabindex="-1">3.4 路径开始和闭合 <a class="header-anchor" href="#_3-4-路径开始和闭合" aria-label="Permalink to &quot;3.4 路径开始和闭合&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">开始路径：ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">beginPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">闭合路径：ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">closePath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>解释：如果是绘制不同状态的线段或者形状，必须使用开始新路径的方法把不同的绘制操作隔开。闭合路径会自动把最后的线头和开始的线头连在一起。</p><p>beginPath：核心的作用是将不同绘制的形状进行隔离。每次执行此方法，表示重新绘制一个路径，跟之前的绘制的墨迹可以进行分开样式设置和管理。</p><h4 id="_3-5-描边-stroke" tabindex="-1">3.5 描边(stroke) <a class="header-anchor" href="#_3-5-描边-stroke" aria-label="Permalink to &quot;3.5 描边(stroke)&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stroke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>解释：根据路径绘制线，路径只是草稿，真正绘制线必须执行 stroke()</p><h4 id="_3-6-填充-fill" tabindex="-1">3.6 填充(fill) <a class="header-anchor" href="#_3-6-填充-fill" aria-label="Permalink to &quot;3.6 填充(fill)&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>解释：填充，是将闭合路径的内容填充具体的颜色。默认是黑色。</p><p><strong>注意</strong>：交叉路径的填充问题：&quot;非零环绕原则&quot;，顺逆时针穿插次数决定是否填充。</p><p><strong>非零环绕原则</strong></p><p>​ “非零环绕规则”是这么来判断有自我交叉情况的路径的：对于路径中的任意给定区域，从该区域内部画一条足够长的线段， ​ 使此线段的终点完全落在路径范围之外。 ​ 下图中的那三个箭头所描述的就是上面这个步骤。 ​ 接下来，将计数器初始化为0， ​ 然后，每当这条线段与路径上的直线或曲线相交时， ​ 就改变计数器的值。如果是与路径的顺时针部分相交，则加1， ​ 如果是与路径的逆时针部分相交，则减1。若计数器的最终值不是0，那么此区域就在路径里面，在调用fill()方法时， ​ 浏览器就会对其进行填充。 ​ 如果最终值是0，那么此区域就不在路径内部，浏览器也就不会对其进行填充了</p><p><img src="https://raw.githubusercontent.com/xuchp/typora-pics/main/canvas/u%253D4233316804%252C1611826753%2526fm%253D253%2526fmt%253Dauto%2526app%253D138%2526f%253DJPEG.jpeg" alt="img"></p><h4 id="_3-7-快速创建矩形rect-方法" tabindex="-1">3.7 快速创建矩形rect()方法 <a class="header-anchor" href="#_3-7-快速创建矩形rect-方法" aria-label="Permalink to &quot;3.7 快速创建矩形rect()方法&quot;">​</a></h4><div class="language-JS vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x,y,width,height)</span></span></code></pre></div><p>解释：x，y是矩形的左上坐标，width和height都是以像素计</p><p>rect方法只是规划了矩形的路径，并没有填充和描边。</p><h4 id="_3-8-快速创建描边矩形和填充矩形" tabindex="-1">3.8 快速创建描边矩形和填充矩形 <a class="header-anchor" href="#_3-8-快速创建描边矩形和填充矩形" aria-label="Permalink to &quot;3.8 快速创建描边矩形和填充矩形&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strokeRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, width, height)</span></span></code></pre></div><ul><li>参数同上，注意此方法绘制完路径后立即进行stroke绘制</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, width, height)</span></span></code></pre></div><ul><li>参数同上，此方法执行完成后，立即对当前矩形进行fill填充</li></ul><h4 id="_3-9-清除矩形-clearrect" tabindex="-1">3.9 清除矩形（clearRect） <a class="header-anchor" href="#_3-9-清除矩形-clearrect" aria-label="Permalink to &quot;3.9 清除矩形（clearRect）&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clearRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, width, height)</span></span></code></pre></div><p>解释：清除某个矩形内的绘制的内容，相当于橡皮擦</p><h3 id="_4-绘制圆形" tabindex="-1">4. 绘制圆形 <a class="header-anchor" href="#_4-绘制圆形" aria-label="Permalink to &quot;4. 绘制圆形&quot;">​</a></h3><p><strong>概述</strong>：arc()方法创建弧/曲线（用于创建圆或部分圆）</p><p>语法：<code>ctx.arc(x, y, sAngle, eAngle, counterclockwise)</code></p><p>解释：</p><pre><code>- x,y：圆心坐标，
- r：半径，
- sAngle：绘制开始的角度。圆心到最右边是0度，顺时针方向弧度增大
- eAngle：绘制结束的角度。注意是弧度。
- counterclockwise：是否是逆时针。true是逆时针，false是顺时针
- 弧度计算公式：\`rad=deg*Math.PI/180\`，在Math提供的方法中，sin、cos等使用的都是弧度
</code></pre><h3 id="_5-绘制文字" tabindex="-1">5. 绘制文字 <a class="header-anchor" href="#_5-绘制文字" aria-label="Permalink to &quot;5. 绘制文字&quot;">​</a></h3><h4 id="_5-1-绘制上下文的文字属性" tabindex="-1">5.1 绘制上下文的文字属性 <a class="header-anchor" href="#_5-1-绘制上下文的文字属性" aria-label="Permalink to &quot;5.1 绘制上下文的文字属性&quot;">​</a></h4><ol><li><p><strong>font</strong>：设置或返回文本内容的当前字体属性</p><p>font属性使用的语法和css font属性相同</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.font</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;18px 微软雅黑&quot;</span></span></code></pre></div></li><li><p><strong>textAlign</strong>： 设置或者返回文本内容当前的对其方式</p><ul><li>start：默认。文本在指定的位置开始</li><li>end：文本在指定的位置结束</li><li>center：文本的中心被放在指定的位置</li><li>left：文本左对齐</li><li>right：文本右对齐</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.textAlign</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;left&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><img src="https://raw.githubusercontent.com/xuchp/typora-pics/main/canvas/u%3D2622540504%2C2116527914%26fm%3D253%26fmt%3Dauto%26app%3D138%26f%3DPNG" alt="img"></p></li><li><p><strong>textBaseline</strong>:设置或返回文本当在绘制文本时使用的当前文本基线</p><ul><li>alphabetic：默认。文本基线是普通的字母基线</li><li>top：文本基线是em方框的顶端</li><li>hanging：文本基线是悬挂基线</li><li>middle：文本基线是em方框的正中</li><li>ideographic：文本基线是em的基线</li><li>bottom：文本基线是em方框的底端</li></ul><p><img src="https://raw.githubusercontent.com/xuchp/typora-pics/main/canvas/u%3D4210088866%2C1422297964%26fm%3D253%26fmt%3Dauto%26app%3D138%26f%3DJPEG" alt="img"></p></li></ol><h4 id="_5-2-上下文绘制文字的方法" tabindex="-1">5.2 上下文绘制文字的方法 <a class="header-anchor" href="#_5-2-上下文绘制文字的方法" aria-label="Permalink to &quot;5.2 上下文绘制文字的方法&quot;">​</a></h4><p><strong>ctx.fillText()</strong> ：在画布上绘制被填充的文本</p><p><strong>ctx.strokeText()</strong>：在画布上绘制文本（无填充）</p><p><strong>ctx.measureText()</strong>：返回包含指定文本宽度的对象</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//综合案例代码：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">moveTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.fillStyle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;purple&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//设置填充颜色为紫色</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.font </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;20px &quot;微软雅黑&quot;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//设置字体</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.textBaseline </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;bottom&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//设置字体底线对齐绘制基线</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.textAlign </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;left&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//设置字体对齐的方式</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//ctx.strokeText( &quot;left&quot;, 450, 400 );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Top-g&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//填充文字</span></span></code></pre></div>`,69),l=[e];function h(p,k,r,d,c,o){return i(),a("div",null,l)}const u=s(n,[["render",h]]);export{E as __pageData,u as default};
