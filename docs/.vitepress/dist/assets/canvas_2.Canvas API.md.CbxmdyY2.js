import{_ as t,c as a,o as r,a8 as e}from"./chunks/framework.Uk78KS4B.js";const u=JSON.parse('{"title":"Canvas API","description":"","frontmatter":{},"headers":[],"relativePath":"canvas/2.Canvas API.md","filePath":"canvas/2.Canvas API.md"}'),o={name:"canvas/2.Canvas API.md"},d=e('<h1 id="canvas-api" tabindex="-1">Canvas API <a class="header-anchor" href="#canvas-api" aria-label="Permalink to &quot;Canvas API&quot;">​</a></h1><h2 id="一、颜色、样式和阴影" tabindex="-1">一、颜色、样式和阴影 <a class="header-anchor" href="#一、颜色、样式和阴影" aria-label="Permalink to &quot;一、颜色、样式和阴影&quot;">​</a></h2><h3 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h3><h4 id="_1-fillstyle" tabindex="-1">1. fillStyle <a class="header-anchor" href="#_1-fillstyle" aria-label="Permalink to &quot;1. fillStyle&quot;">​</a></h4><p><strong>作用</strong>：设置或返回用于填充绘画的颜色、渐变或模式。</p><p><strong>默认值</strong>：#000000</p><p><strong>JavaScript 语法</strong>：<code>context.fillStyle = color|gradient|pattern;</code></p><p><strong>属性值</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>color</td><td>指定绘图填充色的 css 颜色值，默认值是#000000</td></tr><tr><td>gradient</td><td>用于填充绘图的渐变对象 (线性或者放射性)</td></tr><tr><td>pattern</td><td>用于填充绘图的 pattern 对象</td></tr></tbody></table><h4 id="_2-strokestyle" tabindex="-1">2. strokeStyle <a class="header-anchor" href="#_2-strokestyle" aria-label="Permalink to &quot;2. strokeStyle&quot;">​</a></h4><p><strong>作用</strong>：设置或返回用于笔触的颜色、渐变或模式。</p><p><strong>默认值</strong>：#000000</p><p><strong>JavaScript 语法</strong>：<code>context.strokeStyle = color|gradient|pattern;</code></p><p><strong>属性值</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>color</td><td>指定绘图填充色的 css 颜色值，默认值是#000000</td></tr><tr><td>gradient</td><td>用于填充绘图的渐变对象 (线性或者放射性)</td></tr><tr><td>pattern</td><td>用于填充绘图的 pattern 对象</td></tr></tbody></table><h4 id="_3-shadowcolor" tabindex="-1">3. shadowColor <a class="header-anchor" href="#_3-shadowcolor" aria-label="Permalink to &quot;3. shadowColor&quot;">​</a></h4><p><strong>作用</strong>：设置或返回用于阴影的颜色</p><p><strong>默认值</strong>：#000000</p><p><strong>JavaScript 语法</strong>：<code>context.shadowColor=color;</code></p><p><strong>属性值</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>color</td><td>用于阴影的 css 颜色值。默认是#000000</td></tr></tbody></table><h4 id="_4-shadowblur" tabindex="-1">4. shadowBlur <a class="header-anchor" href="#_4-shadowblur" aria-label="Permalink to &quot;4. shadowBlur&quot;">​</a></h4><p><strong>作用</strong>：设置或返回用于阴影的模糊级别</p><p><strong>默认值</strong>：</p><p><strong>JavaScript 语法</strong>：<code>context.shadowBlur=number</code></p><p><strong>属性值</strong></p><table><thead><tr><th>值</th><th>属性</th></tr></thead><tbody><tr><td>number</td><td>属性的模糊级别</td></tr></tbody></table><h4 id="_5-shadowoffsetx" tabindex="-1">5. shadowOffsetX <a class="header-anchor" href="#_5-shadowoffsetx" aria-label="Permalink to &quot;5. shadowOffsetX&quot;">​</a></h4><p><strong>作用</strong>：设置或返回阴影与形状的水平距离</p><p>shadowOffsetX = 0 指示阴影位于形状的正下方</p><p>shadowOffsetX = 20 指示阴影位于形状 left 位置右侧的 20 像素处</p><p>shadowOffsetX = -20 指示阴影位于形状 left 位置左侧的 20 像素处</p><p><strong>默认值</strong>：0</p><p><strong>JavaScript 语法</strong>：<code>context.shadowOffsetX = number;</code></p><p><strong>属性值</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>number</td><td>正值或者负值，定义形状与阴影的水平距离</td></tr></tbody></table><h4 id="_6-shadowoffsety" tabindex="-1">6. shadowOffsetY <a class="header-anchor" href="#_6-shadowoffsety" aria-label="Permalink to &quot;6. shadowOffsetY&quot;">​</a></h4><p><strong>作用</strong>：设置或返回阴影与形状的垂直距离</p><p>shadowOffsetY = 0 指示阴影位于形状的正下方</p><p>shadowOffsetY = 20 指示阴影位于形状 top 位置下方的 20 像素处</p><p>shadowOffsetY = -20 指示阴影位于形状 top 位置上方的 20 像素处</p><p><strong>默认值</strong>：0</p><p><strong>JavaScript 语法</strong>：<code>context.shadowOffsetY = number;</code></p><p><strong>属性值</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>number</td><td>正值或者负值，定义形状与阴影的垂直距离</td></tr></tbody></table><h3 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h3><h4 id="_1-createlinegradient" tabindex="-1">1. createLineGradient() <a class="header-anchor" href="#_1-createlinegradient" aria-label="Permalink to &quot;1. createLineGradient()&quot;">​</a></h4><p><strong>作用</strong>：创建线性渐变(用在画布内容上)，渐变可用于填充矩形、圆形、线条、文本等等</p><p>该对象作为 <a href="#_2-strokestyle">strokeStyle</a> 或 <a href="#_1-fillstyle">fillStyle</a> 属性的值，需要配合 addColorStop() 方法规定不同的颜色，以及在 gradient 对象中的何处定位颜色</p><p><strong>JavaScript 语法</strong>：<code>context.createLinearGradient(x0, y0, x1, y1)</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x0</td><td>渐变开始点的 x 坐标</td></tr><tr><td>y0</td><td>渐变开始点的 y 坐标</td></tr><tr><td>x1</td><td>渐变结束点的 x 坐标</td></tr><tr><td>y1</td><td>渐变结束点的 y 坐标</td></tr></tbody></table><h4 id="_2-createpattern" tabindex="-1">2. createPattern() <a class="header-anchor" href="#_2-createpattern" aria-label="Permalink to &quot;2. createPattern()&quot;">​</a></h4><p><strong>作用</strong>：在指定的方向上重复制定的元素</p><p>元素可以是图片、视频，或者其他 &lt;canvas&gt; 元素</p><p>被重复的元素可用于绘制/填充矩形、圆形或者线条等等。</p><p><strong>JavaScript 语法</strong>：<code>context.createPattern(image, &quot;repeat|repeat-x|repeat-y|no-repeat&quot;);</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>image</td><td>规定要使用的模式的图片、画布或视频元素</td></tr><tr><td>repeat</td><td>默认。该模式下在水平和垂直方向重复</td></tr><tr><td>repeat-x</td><td>该模式只在水平方向重复</td></tr><tr><td>repeat-y</td><td>该模式只在垂直方向重复</td></tr><tr><td>no-repeat</td><td>该模式只显示一次（不重复）</td></tr></tbody></table><h4 id="_3-createradialgradient" tabindex="-1">3. createRadialGradient() <a class="header-anchor" href="#_3-createradialgradient" aria-label="Permalink to &quot;3. createRadialGradient()&quot;">​</a></h4><p><strong>作用</strong>：创建放射状/环形的渐变(用在画布内容上)，渐变可用于填充矩形、圆形、线条、文本等等</p><p>该对象作为 <a href="#_2-strokestyle">strokeStyle</a> 或 <a href="#_1-fillstyle">fillStyle</a> 属性的值，需要配合 addColorStop() 方法规定不同的颜色，以及在 gradient 对象中的何处定位颜色</p><p><strong>JavaScript 语法</strong>：<code>context.createRadialGradient(x0, y0, r0, x1, y1, r1)</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x0</td><td>渐变开始圆的 x 坐标</td></tr><tr><td>y0</td><td>渐变开始圆的 y 坐标</td></tr><tr><td>r0</td><td>开始圆的半径</td></tr><tr><td>x1</td><td>渐变结束圆的 x 坐标</td></tr><tr><td>y1</td><td>渐变结束圆的 y 坐标</td></tr><tr><td>r1</td><td>结束圆的半径</td></tr></tbody></table><h4 id="_4-addcolorstop" tabindex="-1">4. addColorStop() <a class="header-anchor" href="#_4-addcolorstop" aria-label="Permalink to &quot;4. addColorStop()&quot;">​</a></h4><p><strong>作用</strong>：规定渐变对象中的颜色和停止位置</p><p>addColorStop() 方法与 <a href="#_1-createlinegradient">createLinearGradient()</a> 和 <a href="#_3-createradialgradient">createRadialGradient()</a> 一起使用</p><p><strong>注意</strong>：您可以多次调用 addColorStop()方法来改变渐变，如果您不对渐变的对象使用该方法，那么渐变将不可见。为了获得可见的渐变，您需要创建至少一个色标。</p><p><strong>JavaScript 语法</strong>:<code>gradient.addColorStop(stop,color)</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>stop</td><td>介于 0.0 与 1.0 之间的值，表示渐变中开始与结束之间的位置</td></tr><tr><td>color</td><td>在 stop 位置显示的 CSS 颜色值</td></tr></tbody></table><h2 id="二、线条样式" tabindex="-1">二、线条样式 <a class="header-anchor" href="#二、线条样式" aria-label="Permalink to &quot;二、线条样式&quot;">​</a></h2><h3 id="属性-1" tabindex="-1">属性 <a class="header-anchor" href="#属性-1" aria-label="Permalink to &quot;属性&quot;">​</a></h3><h4 id="_1-linecap" tabindex="-1">1. lineCap <a class="header-anchor" href="#_1-linecap" aria-label="Permalink to &quot;1. lineCap&quot;">​</a></h4><p><strong>作用</strong>：设置或返回线条的结束端点样式</p><p>&quot;round&quot; 和 &quot;square&quot; 会使线条略微变长</p><p><strong>默认值</strong>：butt</p><p><strong>JavaScript 语法</strong>：<code>context.lineCap = &quot;butt | round | square&quot;</code></p><p><strong>属性值</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>butt</td><td>默认。向线条的每个末端添加平直的边缘</td></tr><tr><td>round</td><td>向线条的每个末端添加圆形线帽</td></tr><tr><td>square</td><td>向线条的每个末端添加正方形线帽</td></tr></tbody></table><h4 id="_2-linejoin" tabindex="-1">2. lineJoin <a class="header-anchor" href="#_2-linejoin" aria-label="Permalink to &quot;2. lineJoin&quot;">​</a></h4><p><strong>作用</strong>：设置或返回两条线相交时，所创建的拐角类型</p><p><strong>注意</strong>：&quot;miter&quot; 值受 &quot;<a href="#_4-miterlimit">miterLimit</a>&quot; 属性的影响</p><p><strong>默认值</strong>：miter</p><p><strong>JavaScript 语法</strong>：<code>context.lineJoin=&quot;bevel|round|miter&quot;;</code></p><p><strong>属性值</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>bevel</td><td>创建斜角</td></tr><tr><td>round</td><td>创建圆角</td></tr><tr><td>miter</td><td>默认。创建尖角</td></tr></tbody></table><h4 id="_3-linewidth" tabindex="-1">3. lineWidth <a class="header-anchor" href="#_3-linewidth" aria-label="Permalink to &quot;3. lineWidth&quot;">​</a></h4><p><strong>作用</strong>：设置或返回当前的线条宽度</p><p><strong>默认值</strong>：1</p><p><strong>JavaScript 语法</strong>：<code>context.lineWidth = number;</code></p><p><strong>属性值</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>number</td><td>当前线条的宽度，以像素计</td></tr></tbody></table><h4 id="_4-miterlimit" tabindex="-1">4. miterLimit <a class="header-anchor" href="#_4-miterlimit" aria-label="Permalink to &quot;4. miterLimit&quot;">​</a></h4><p><strong>作用</strong>：设置或返回最大斜接长度</p><p>斜接长度指的是在两条线交汇处内角和外角之间的距离</p><p><strong>提示</strong>：只有当 lineJoin 属性为 &quot;miter&quot; 时， miterLimit 才有效。</p><p>边角的角度越小，斜接长度就会越大。</p><p>为了避免斜接长度过长，我们可以使用 miterLimit 属性。</p><p>如果斜接长度超过 miterLimit 的值，边角会以 lineJoin 的 &quot;bevel&quot; 类型来显示(Fig3)</p><p><img src="https://raw.githubusercontent.com/xuchp/typora-pics/main/canvas/img_miterlimitBevelFig.gif" alt="Miter Limit figure 2"></p><p><strong>默认值</strong>：10</p><p><strong>JavaScript 语法</strong>：<code>context.miterLimit = number;</code></p><p><strong>属性值</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>number</td><td>正数。规定最大斜接长度，如果斜接长度超过 miterLimit 的值，边角会以 lineJoin 的 &quot;bevel&quot; 类型来显示</td></tr></tbody></table><h2 id="三、矩形" tabindex="-1">三、矩形 <a class="header-anchor" href="#三、矩形" aria-label="Permalink to &quot;三、矩形&quot;">​</a></h2><h3 id="方法-1" tabindex="-1">方法 <a class="header-anchor" href="#方法-1" aria-label="Permalink to &quot;方法&quot;">​</a></h3><h4 id="_1-rect" tabindex="-1">1. rect() <a class="header-anchor" href="#_1-rect" aria-label="Permalink to &quot;1. rect()&quot;">​</a></h4><p><strong>作用</strong>：创建矩形</p><p><strong>提示</strong>：请使用 <a href="#_2-stroke">stroke()</a> 或 <a href="#_1-fill">fill()</a> 方法在画布上实际地绘制矩形。</p><p><strong>JavaScript 语法</strong>：`context.rect(x, y, width, height);</p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x</td><td>矩形左上角的 x 坐标</td></tr><tr><td>y</td><td>矩形左上角的 y 坐标</td></tr><tr><td>width</td><td>矩形的宽度，以像素计</td></tr><tr><td>height</td><td>矩形的高度，以像素计</td></tr></tbody></table><h4 id="_2-fillrect" tabindex="-1">2. fillRect() <a class="header-anchor" href="#_2-fillrect" aria-label="Permalink to &quot;2. fillRect()&quot;">​</a></h4><p><strong>作用</strong>：创建“被填充”的矩形。默认的填充颜色是黑色</p><p><strong>提示</strong>：请使用 <a href="#_1-fillstyle">fillStyle</a> 属性来设置用于填充绘图的颜色、渐变或模式</p><p><strong>JavaScript 语法</strong>：<code>context.fillRect(x, y, width, height);</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x</td><td>矩形左上角的 x 坐标</td></tr><tr><td>y</td><td>矩形左上角的 y 坐标</td></tr><tr><td>width</td><td>矩形的宽度，以像素计</td></tr><tr><td>height</td><td>矩形的高度，以像素计</td></tr></tbody></table><h4 id="_3-strokerect" tabindex="-1">3. strokeRect() <a class="header-anchor" href="#_3-strokerect" aria-label="Permalink to &quot;3. strokeRect()&quot;">​</a></h4><p>*作用**：绘制矩形（无填充）。笔触的默认颜色是黑色</p><p><strong>提示</strong>：请使用 <a href="#_2-strokestyle">strokeStyle</a> 属性来设置笔触的颜色、渐变或模式</p><p><strong>JavaScript 语法</strong>：<code>context.strokeRect(x, y, width, height);</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x</td><td>矩形左上角的 x 坐标</td></tr><tr><td>y</td><td>矩形左上角的 y 坐标</td></tr><tr><td>width</td><td>矩形的宽度，以像素计</td></tr><tr><td>height</td><td>矩形的高度，以像素计</td></tr></tbody></table><h4 id="_4-clearrect" tabindex="-1">4. clearRect() <a class="header-anchor" href="#_4-clearrect" aria-label="Permalink to &quot;4. clearRect()&quot;">​</a></h4><p><strong>作用</strong>：在给定的矩形内清除指定的像素</p><p><strong>JavaScript 语法</strong>：<code>context.clearRect(x, y, width, height);</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x</td><td>要清除的矩形左上角的 x 坐标</td></tr><tr><td>y</td><td>要清除的矩形左上角的 y 坐标</td></tr><tr><td>width</td><td>要清除的矩形的宽度，以像素计</td></tr><tr><td>height</td><td>要清除的矩形的高度，以像素计</td></tr></tbody></table><h2 id="四、路径" tabindex="-1">四、路径 <a class="header-anchor" href="#四、路径" aria-label="Permalink to &quot;四、路径&quot;">​</a></h2><h3 id="方法-2" tabindex="-1">方法 <a class="header-anchor" href="#方法-2" aria-label="Permalink to &quot;方法&quot;">​</a></h3><h4 id="_1-fill" tabindex="-1">1. fill() <a class="header-anchor" href="#_1-fill" aria-label="Permalink to &quot;1. fill()&quot;">​</a></h4><p><strong>作用</strong>：填充当前的图像/路径。默认是黑色。</p><p><strong>提示</strong>：请使用 <a href="#_1-fillstyle">fillStyle</a> 属性来填充另一种颜色/渐变</p><p><strong>注意</strong>：如果路径未关闭，那么 fIll() 方法会从路径结束点到开始点之间添加一条线，已关闭路径（正如 <a href="#_5-closepath">closePath()</a>一样），然后填充该路径。</p><p><strong>JavaScript 语法</strong>：<code>context.fill();</code></p><h4 id="_2-stroke" tabindex="-1">2. stroke() <a class="header-anchor" href="#_2-stroke" aria-label="Permalink to &quot;2. stroke()&quot;">​</a></h4><p><strong>作用</strong>：实际地绘制出通过 moveTo() 和 lineTo() 方法定义的路径。默认颜色是黑色。</p><p><strong>提示</strong>：请使用 <a href="#_2-strokestyle">strokeStyle</a> 属性来填充另一种颜色/渐变</p><p><strong>JavaScript 语法</strong>：<code>context.stroke();</code></p><h4 id="_3-beginpath" tabindex="-1">3. beginPath() <a class="header-anchor" href="#_3-beginpath" aria-label="Permalink to &quot;3. beginPath()&quot;">​</a></h4><p><strong>作用</strong>：开始一条路径，或者重置当前的路径</p><p><strong>JavaScript 语法</strong>：<code>context.beginPath();</code></p><h4 id="_4-moveto" tabindex="-1">4. moveTo() <a class="header-anchor" href="#_4-moveto" aria-label="Permalink to &quot;4. moveTo()&quot;">​</a></h4><p><strong>作用</strong>：把路径移动到画布中的指定点，不创建线条</p><p><strong>提示</strong>：请使用 <a href="#_2-stroke">stroke()</a> 方法在画布上绘制确切的路径。</p><p><strong>JavaScript 语法</strong>：<code>context.moveTo(x, y);</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x</td><td>路径的目标位置的 x 坐标</td></tr><tr><td>y</td><td>路径的目标位置的 y 坐标</td></tr></tbody></table><h4 id="_5-closepath" tabindex="-1">5. closePath() <a class="header-anchor" href="#_5-closepath" aria-label="Permalink to &quot;5. closePath()&quot;">​</a></h4><p><strong>作用</strong>：创建从当前点到开始点的路径。</p><p><strong>提示</strong>：请使用 <a href="#_2-stroke">stroke()</a> 方法在画布上绘制确切的路径。</p><p><strong>提示</strong>：请使用 <a href="#_1-fill">fill()</a> 方法来填充图像(默认是黑色)。请使用 <a href="#_2-strokestyle">strokeStyle</a> 属性来填充另一种颜色/渐变</p><p><strong>JavaScript 语法</strong>：<code>context.closePath();</code></p><h4 id="_6-lineto" tabindex="-1">6. lineTo() <a class="header-anchor" href="#_6-lineto" aria-label="Permalink to &quot;6. lineTo()&quot;">​</a></h4><p><strong>作用</strong>：添加一个新点，然后创建从该点到画布中最后指定点的线条(该方法并不会创建线条)。</p><p><strong>提示</strong>：请使用 <a href="#_2-stroke">stroke()</a> 方法在画布上绘制确切的路径。</p><p><strong>JavaScript 语法</strong>：<code>context.lineTo(x, y);</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x</td><td>路径的目标位置的 x 坐标</td></tr><tr><td>y</td><td>路径的目标位置的 y 坐标</td></tr></tbody></table><h4 id="_7-clip" tabindex="-1">7. clip() <a class="header-anchor" href="#_7-clip" aria-label="Permalink to &quot;7. clip()&quot;">​</a></h4><p><strong>作用</strong>：从原画布中裁剪任意形状和尺寸。</p><p>**提示：**一旦剪切了某个区域，则所有之后的绘图都会被限制在被剪切的区域内（不能访问画布上的其他区域）。您也可以在使用 clip() 方法前通过使用 save() 方法对当前画布区域进行保存，并在以后的任意时间对其进行恢复（通过 restore() 方法）。</p><p><strong>JavaScript 语法</strong>：<code>context.clip();</code></p><h4 id="_8-quadraticcurveto" tabindex="-1">8. quadraticCurveTo() <a class="header-anchor" href="#_8-quadraticcurveto" aria-label="Permalink to &quot;8. quadraticCurveTo()&quot;">​</a></h4><p><strong>作用</strong>：通过使用表示二次贝塞尔曲线的指定控制点，向当前路径添加一个点。</p><p>二次贝塞尔曲线需要两个点。第一个点用于二次贝塞尔曲线计算中的控制点，第二个点是曲线的结束点。曲线的开始点是当前路径中的最后一个点。如果路径不存在，那么请使用 <a href="#_3-beginpath">beginPath()</a> 和 <a href="#_4-moveto">moveTo()</a> 方法来定义开始点。</p><p><img src="https://raw.githubusercontent.com/xuchp/typora-pics/main/canvas/img_quadraticcurve.gif" alt="二次贝塞尔曲线"></p><ul><li>开始点：moveTo(20, 20)</li><li>控制点：quadraticCurveTo(<strong>20</strong>, <strong>100</strong>, 200, 20)</li><li>结束点：quadraticCurveTo(20, 100, <strong>200</strong>, <strong>20</strong>)</li></ul><p><strong>JavaScript 语法</strong>：<code>context.quadraticCurveTo(cpx, cpy, x, y);</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>cpx</td><td>贝塞尔控制点的 x 坐标</td></tr><tr><td>cpy</td><td>贝塞尔控制点的 y 坐标</td></tr><tr><td>x</td><td>结束点的 x 坐标</td></tr><tr><td>y</td><td>结束点的 y 坐标</td></tr></tbody></table><h4 id="_9-beziercurveto" tabindex="-1">9. bezierCurveTo() <a class="header-anchor" href="#_9-beziercurveto" aria-label="Permalink to &quot;9. bezierCurveTo()&quot;">​</a></h4><p><strong>作用</strong>：通过使用表示三次贝塞尔曲线的制定控制点，向当前路径添加一个点</p><p>三次贝塞尔曲线需要三个点。前两个是用于贝塞尔计算值的控制点，第三个点是曲线的结束点。曲线的开始点是当前路径中最后一个点。如果路径不存在，那么请使用 <a href="#_3-beginpath">beginPath()</a> 和 <a href="#_4-moveto">moveTo()</a> 方法来定义开始点。</p><p><img src="https://raw.githubusercontent.com/xuchp/typora-pics/main/canvas/img_beziercurve.gif" alt="三次贝塞尔曲线"></p><ul><li>开始点：moveTo(20,20)</li><li>控制点 1：bezierCurveTo(<strong>20,100</strong>,200,100,200,20)</li><li>控制点 2：bezierCurveTo(20,100,<strong>200,100</strong>,200,20)</li><li>结束点：bezierCurveTo(20,100,200,100,<strong>200,20</strong>)</li></ul><p><strong>JavaScript 语法</strong>：<code>context.bezierCurveTo(cp1x,cp1y,cp2x,cp2y,x,y);</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>cp1x</td><td>第一个贝塞尔控制点的 x 坐标</td></tr><tr><td>cp1y</td><td>第一个贝塞尔控制点的 y 坐标</td></tr><tr><td>cp2x</td><td>第二个贝塞尔控制点的 x 坐标</td></tr><tr><td>cp2y</td><td>第二个贝塞尔控制点的 y 坐标</td></tr><tr><td>x</td><td>结束点的 x 坐标</td></tr><tr><td>y</td><td>结束点的 y 坐标</td></tr></tbody></table><h4 id="_10-arc" tabindex="-1">10. arc() <a class="header-anchor" href="#_10-arc" aria-label="Permalink to &quot;10. arc()&quot;">​</a></h4><p><strong>作用</strong>：创建弧/曲线(用于创建圆或部分圆)</p><p><strong>提示</strong>：如需通过 <code>arc()</code> 来创建圆，请把其实角设置为 0，结束角设置为<code>2* Math.PI</code></p><p><strong>提示</strong>：请使用 <a href="#_2-stroke">stroke()</a> 或 <a href="#_1-fill">fill()</a> 方法在画布上绘制实际的弧。</p><p><img src="https://raw.githubusercontent.com/xuchp/typora-pics/main/canvas/img_arc.gif" alt="An arc"></p><ul><li>中心：arc(<strong>100, 75</strong>, 50, 0 * Math.PI, 1.5 * Math.PI)</li><li>起始角：arc(100, 75, 50, <strong>0 * Math.PI</strong>, 1.5 * Math.PI)</li><li>结束角：arc(100, 75, 50, 0 * Math.PI, <strong>1.5 * Math.PI</strong>)</li></ul><p><strong>JavaScript 语法</strong>：<code>context.arc(x,y,r,sAngle,eAngle,counterclockwise);</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x</td><td>圆的中心的 x 坐标</td></tr><tr><td>y</td><td>圆的中心的 y 坐标</td></tr><tr><td>r</td><td>圆的半径</td></tr><tr><td>sAngle</td><td>起始角，以弧度计(弧的圆心的三点钟位置是 0 度)</td></tr><tr><td>eAngle</td><td>结束角，以弧度计</td></tr><tr><td>counterclockwise</td><td>可选。规定应该逆时针还是顺时针绘图。false = 顺时针，true = 逆时针，默认是 false</td></tr></tbody></table><h4 id="_11-arcto" tabindex="-1">11. arcTo() <a class="header-anchor" href="#_11-arcto" aria-label="Permalink to &quot;11. arcTo()&quot;">​</a></h4><p><strong>作用</strong>：在画布上创建介于两个切线之间的弧、曲线</p><p><img src="https://raw.githubusercontent.com/xuchp/typora-pics/main/canvas/img_canvas_arcto.png" alt="img"></p><p><strong>提示</strong>：请使用 <a href="#_2-stroke">stroke()</a> 方法在画布上绘制确切的弧</p><p><strong>JavaScript 语法</strong>：<code>context.arcTo(x1, y1, x2, y2, r);</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x1</td><td>两切线交点的横坐标</td></tr><tr><td>y1</td><td>两切线交点的纵坐标</td></tr><tr><td>x2</td><td>第二条切线上一点的横坐标</td></tr><tr><td>Y2</td><td>第二条切线上一点的纵坐标</td></tr><tr><td>r</td><td>弧的半径</td></tr></tbody></table><p>其中第一条切线上的任意一点的横纵坐标是伤害一次点的位置。</p><h4 id="_12-ispointpath" tabindex="-1">12. isPointPath() <a class="header-anchor" href="#_12-ispointpath" aria-label="Permalink to &quot;12. isPointPath()&quot;">​</a></h4><p><strong>作用</strong>：如果指定点位于当前路径中，<code>isPointPath()</code> 方法返回 true，否则返回 false。</p><p><strong>JavaScript 语法</strong>：<code>context.isPointpath(x, y)</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x</td><td>要测试的 x 坐标</td></tr><tr><td>y</td><td>要测试的 y 坐标</td></tr></tbody></table><h2 id="五、转换" tabindex="-1">五、转换 <a class="header-anchor" href="#五、转换" aria-label="Permalink to &quot;五、转换&quot;">​</a></h2><h3 id="方法-3" tabindex="-1">方法 <a class="header-anchor" href="#方法-3" aria-label="Permalink to &quot;方法&quot;">​</a></h3><h4 id="_1-scale" tabindex="-1">1. scale() <a class="header-anchor" href="#_1-scale" aria-label="Permalink to &quot;1. scale()&quot;">​</a></h4><p><strong>作用</strong>：缩放当前绘图至更大或更小</p><p><strong>注意</strong>：如果您对绘图进行缩放，所有之后的绘图也会被缩放。定位也会被缩放。如果您 scale(2, 2)，那么绘图将定位于距离画布左上角两倍远的位置</p><p><strong>JavaScript 语法</strong>：<code>context.scale(scaleWidth, scaleHeight);</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>scaleWidth</td><td>缩放当前绘图的宽度(1 = 100%， 0.5 = 50% , 2 = 200%，依次类推)。</td></tr><tr><td>scaleHeight</td><td>缩放当前绘图的高度(1 = 100%， 0.5 = 50% , 2 = 200%，依次类推)。</td></tr></tbody></table><h4 id="_2-rotate" tabindex="-1">2. rotate() <a class="header-anchor" href="#_2-rotate" aria-label="Permalink to &quot;2. rotate()&quot;">​</a></h4><p><strong>作用</strong>：旋转当前绘图</p><p><strong>注意</strong>：旋转只会影响到旋转完成后的绘图</p><p><strong>JavaScript 语法</strong>：<code>context.rotate(angle);</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>angle</td><td>旋转角度，以弧度计。</td></tr></tbody></table><h4 id="_3-translate" tabindex="-1">3. translate() <a class="header-anchor" href="#_3-translate" aria-label="Permalink to &quot;3. translate()&quot;">​</a></h4><p><strong>作用</strong>：重新映射画布上的(0,0)位置</p><p><strong>注意</strong>：当您在<code>translate()</code>之后调用诸如<code>fillRect()</code>之类的方法时，值会添加到 x 和 y 坐标值上。</p><p><img src="https://raw.githubusercontent.com/xuchp/typora-pics/main/canvas/img_translate.gif" alt="Illustration of the translate() method"></p><p><strong>JavaScript 语法</strong>：<code>context.translate(x, y);</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x</td><td>添加到水平坐标(x)上的值。</td></tr><tr><td>y</td><td>添加到水平坐标(y)上的值。</td></tr></tbody></table><h4 id="_4-transform" tabindex="-1">4. transform() <a class="header-anchor" href="#_4-transform" aria-label="Permalink to &quot;4. transform()&quot;">​</a></h4><p><strong>作用</strong>：替换当前绘图的变换矩阵。它以下面描述的矩阵来操作当前的变换矩阵：</p><p>a c e</p><p>b d f</p><p>0 0 1</p><p>换句话说，<code>transform()</code> 允许您缩放、旋转、移动并倾斜当前的环境。</p><p><strong>注意</strong>：该变换只会影响<code>transform()</code> 方法调用之后的绘图</p><p><strong>注意</strong>：<code>transform()</code>方法的行为相对于由<code>rotate()</code>、<code>scale()</code>、<code>translate()</code>或<code>transform()</code>完成的其他变换。例如：如果您已经将绘图设置为放大两倍，则 <code>transform()</code> 方法会把绘图放大两倍，您的绘图最终将放大四倍。</p><p>**提示：**请查看 <a href="#_5-settransform">setTransform()</a> 方法，它不会相对于其他变换来发生行为。</p><p><strong>JavaScript 语法</strong>：<code>context.transform(a, b, c, d, e, f)</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>水平缩放绘图</td></tr><tr><td>b</td><td>水平倾斜绘图</td></tr><tr><td>c</td><td>垂直倾斜绘图</td></tr><tr><td>d</td><td>垂直缩放绘图</td></tr><tr><td>e</td><td>水平移动绘图</td></tr><tr><td>f</td><td>垂直移动绘图</td></tr></tbody></table><h4 id="_5-settransfrom" tabindex="-1">5. setTransfrom() <a class="header-anchor" href="#_5-settransfrom" aria-label="Permalink to &quot;5. setTransfrom()&quot;">​</a></h4><p><strong>作用</strong>：把当前的变换矩阵重置为单位矩阵，然后以相同的参数运行 <a href="#_4-transform">transform()</a> .</p><p>换句话说，<code>setTransform()</code>允许您缩放、旋转、移动并倾斜当前的环境</p><p><strong>注意</strong>：该变换只会影响<code>setTransform()</code>方法调用之后的绘图</p><p><strong>JavaScript 语法</strong>：<code>context.setTransform(a, b, c, d, e, f);</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>水平缩放绘图</td></tr><tr><td>b</td><td>水平倾斜绘图</td></tr><tr><td>c</td><td>垂直倾斜绘图</td></tr><tr><td>d</td><td>垂直缩放绘图</td></tr><tr><td>e</td><td>水平移动绘图</td></tr><tr><td>f</td><td>垂直移动绘图</td></tr></tbody></table><h2 id="六、文本" tabindex="-1">六、文本 <a class="header-anchor" href="#六、文本" aria-label="Permalink to &quot;六、文本&quot;">​</a></h2><h3 id="属性-2" tabindex="-1">属性 <a class="header-anchor" href="#属性-2" aria-label="Permalink to &quot;属性&quot;">​</a></h3><h4 id="_1-font" tabindex="-1">1. font <a class="header-anchor" href="#_1-font" aria-label="Permalink to &quot;1. font&quot;">​</a></h4><p><strong>作用</strong>：设置或返回文本内容当前的字体属性</p><p><strong>默认值</strong>：10px sans-serif</p><p><strong>JavaScript 语法</strong>：<code>context.font = &quot;italic small-caps bond 12px arial&quot;;</code></p><p><strong>属性值</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>font-style</td><td>规定字体的样式。可能的值<br>- normal <br>- italic<br>- oblique</td></tr><tr><td>font-variant</td><td>规定字体变体。可能的值：<br>normal<br>small-caps</td></tr><tr><td>font-weight</td><td>规定字体的粗细。可能的值<br> normal<br>bold<br>bolder<br>lighter<br>100<br>200<br>300<br>400<br>500<br>600<br>700<br>800<br>900</td></tr><tr><td>font-size/line-height</td><td>规定字号和行高，以像素计</td></tr><tr><td>font-family</td><td>规定字体系列</td></tr><tr><td>caption</td><td>使用标题控制的字体(比如按钮、下拉列表等)。</td></tr><tr><td>icon</td><td>使用用于标记图标的字体</td></tr><tr><td>menu</td><td>使用用于菜单中的字体(下拉列表和菜单列表)</td></tr><tr><td>message-box</td><td>使用用于对话框的字体</td></tr><tr><td>small-caption</td><td>使用用于标记小型控件的字体</td></tr><tr><td>status-bar</td><td>使用用于窗口状态栏的字体</td></tr></tbody></table><h4 id="_2-textalign" tabindex="-1">2. textAlign <a class="header-anchor" href="#_2-textalign" aria-label="Permalink to &quot;2. textAlign&quot;">​</a></h4><p><strong>作用</strong>：设置或返回文本内容的当前对齐方式</p><p>通常，文本会从指定位置<strong>开始</strong>，不过，如果您设置为 <code>textAlign=&quot;right&quot;</code>并将文本放置到 位置 150，那么会在位置 150<strong>结束</strong>。</p><p><strong>提示</strong>：请使用 <a href="#1_filltext">fillText()</a> 或 <a href="#_2-stroketext">strokeText()</a> 方法在画布上实际地绘制并定位文本。</p><p><img src="https://raw.githubusercontent.com/xuchp/typora-pics/main/canvas/u%253D2622540504%252C2116527914%2526fm%253D253%2526fmt%253Dauto%2526app%253D138%2526f%253DPNG.png" alt="img"></p><p><strong>默认值</strong>：start</p><p><strong>JavaScript 语法</strong>：<code>context.textAlign = &quot;center | end | left | right | start&quot;;</code></p><p><strong>属性值</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>start</td><td>默认。文本在指定的位置开始</td></tr><tr><td>end</td><td>文本在指定的位置结束</td></tr><tr><td>center</td><td>文本的中心被放置在指定的位置</td></tr><tr><td>left</td><td>文本在指定的位置开始</td></tr><tr><td>right</td><td>文本在指定的位置结束</td></tr></tbody></table><h4 id="_3-textbaseline" tabindex="-1">3. textBaseline <a class="header-anchor" href="#_3-textbaseline" aria-label="Permalink to &quot;3. textBaseline&quot;">​</a></h4><p><strong>作用</strong>： 设置或返回在绘制文本时使用的当前文本基线。</p><p><img src="https://raw.githubusercontent.com/xuchp/typora-pics/main/canvas/img_textbaseline.gif" alt="textBaseline illustration"></p><p><strong>注意</strong>： <a href="#1_filltext">fillText()</a> 或 <a href="#_2-stroketext">strokeText()</a> 方法在画布上定位文本时，将使用指定的 textBaseline 值</p><p><strong>默认值</strong>:alphabetic</p><p><strong>JavaScript 语法</strong>：<code>context.textBaseline = &quot;alphabetic | top | hanging | middle | ideographic | bottom&quot;;</code></p><p><strong>属性值</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>alphabetic</td><td>默认。文本基线是普通的字母基线</td></tr><tr><td>top</td><td>文本基线是 em 方框的顶端</td></tr><tr><td>hanging</td><td>文本基线是悬挂基线</td></tr><tr><td>middle</td><td>文本基线是 em 方框的正中</td></tr><tr><td>ideographic</td><td>文本基线是表意基线</td></tr><tr><td>bottom</td><td>文本基线是 em 方框的底端</td></tr></tbody></table><h3 id="方法-4" tabindex="-1">方法 <a class="header-anchor" href="#方法-4" aria-label="Permalink to &quot;方法&quot;">​</a></h3><h4 id="_1-filltext" tabindex="-1">1. fillText() <a class="header-anchor" href="#_1-filltext" aria-label="Permalink to &quot;1. fillText()&quot;">​</a></h4><p><strong>作用</strong>： 在画布上绘制&quot;被填充的&quot;文本。默认的颜色是黑色</p><p><strong>提示</strong>：请使用 <a href="#_1-font">font()</a> 属性来定义字体和字号，并使用 <a href="#_1-fillstyle">fillStyle</a> 属性以另一种颜色/渐变来渲染文本。</p><p><strong>JavaScript 语法</strong>：<code>context.fillText(text, x, y, maxWidth);</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>text</td><td>规定在画布上输出的文本</td></tr><tr><td>x</td><td>开始绘制文本的 x 坐标的位置(相对于画布)</td></tr><tr><td>y</td><td>开始绘制文本的 y 坐标的位置(相对于画布)</td></tr><tr><td>maxWidth</td><td>可选。允许的最大文本宽度，以像素计。</td></tr></tbody></table><h4 id="_2-stroketext" tabindex="-1">2. strokeText() <a class="header-anchor" href="#_2-stroketext" aria-label="Permalink to &quot;2. strokeText()&quot;">​</a></h4><p><strong>作用</strong>：在画布上绘制文本（无填充色）。文本的默认颜色是黑色。</p><p><strong>提示</strong>：请使用 <a href="#_1-font">font()</a> 属性来定义字体和字号，并使用 <a href="#_1-fillstyle">fillStyle</a> 属性以另一种颜色/渐变来渲染文本。</p><p><strong>JavaScript 语法</strong>：<code>context.strokeText(text, x, y, maxWidth);</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>text</td><td>规定在画布上输出的文本</td></tr><tr><td>x</td><td>开始绘制文本的 x 坐标的位置(相对于画布)</td></tr><tr><td>y</td><td>开始绘制文本的 y 坐标的位置(相对于画布)</td></tr><tr><td>maxWidth</td><td>可选。允许的最大文本宽度，以像素计。</td></tr></tbody></table><h4 id="_3-measuretext" tabindex="-1">3. measureText() <a class="header-anchor" href="#_3-measuretext" aria-label="Permalink to &quot;3. measureText()&quot;">​</a></h4><p><strong>作用</strong>：返回包含指定文本宽度的对象。</p><p><strong>提示</strong>：如果您需要在文本向画布输出之前，就了解文本的宽度，那么请使用该方法</p><p><strong>JavaScript 语法</strong>：<code>context.measureText(text).width</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>text</td><td>要测量的文本</td></tr></tbody></table><h2 id="七、图像绘制" tabindex="-1">七、图像绘制 <a class="header-anchor" href="#七、图像绘制" aria-label="Permalink to &quot;七、图像绘制&quot;">​</a></h2><h3 id="方法-5" tabindex="-1">方法 <a class="header-anchor" href="#方法-5" aria-label="Permalink to &quot;方法&quot;">​</a></h3><h4 id="_1-drawimage" tabindex="-1">1. drawImage() <a class="header-anchor" href="#_1-drawimage" aria-label="Permalink to &quot;1. drawImage()&quot;">​</a></h4><p><strong>作用</strong>：向画布上绘制图像、画布或视频</p><p>*JavaScript 语法**</p><table><thead><tr><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>context.drawImage(img, x, y)</td><td>在画布上定位图像</td></tr><tr><td>context.drawImage(img, x, y, width, height)</td><td>在画布上定位图像，并规定图像的宽度和高度</td></tr><tr><td>context.drawImage(img, sx, sy, swidth, sheight, x, y, width, height)</td><td>剪切图像，并在画布上定位被剪切的部分</td></tr></tbody></table><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>img</td><td>规定要使用的图像、画布或视频</td></tr><tr><td>sx</td><td>可选，开始剪切的 x 坐标位置</td></tr><tr><td>sy</td><td>可选，开始剪切的 y 坐标位置</td></tr><tr><td>swidth</td><td>可选，被剪切图像的宽度</td></tr><tr><td>sheight</td><td>可选。被剪切图像的高度</td></tr><tr><td>x</td><td>在画布上放置图像的 x 坐标位置</td></tr><tr><td>y</td><td>在画布上放置图像的 y 坐标位置</td></tr><tr><td>width</td><td>可选。要使用的图像的宽度(伸展或者缩小图像)</td></tr><tr><td>eight</td><td>可选。要使用的图像的高度(伸展或者缩小图像)</td></tr></tbody></table><h2 id="八、像素操作" tabindex="-1">八、像素操作 <a class="header-anchor" href="#八、像素操作" aria-label="Permalink to &quot;八、像素操作&quot;">​</a></h2><h3 id="属性-3" tabindex="-1">属性 <a class="header-anchor" href="#属性-3" aria-label="Permalink to &quot;属性&quot;">​</a></h3><h4 id="_1-width" tabindex="-1">1. width <a class="header-anchor" href="#_1-width" aria-label="Permalink to &quot;1. width&quot;">​</a></h4><p><strong>作用</strong>：返回 ImageData 对象的宽度，以像素计</p><p><strong>JavaScript 语法</strong>：<code>imgData.width</code></p><h4 id="_2-height" tabindex="-1">2. height <a class="header-anchor" href="#_2-height" aria-label="Permalink to &quot;2. height&quot;">​</a></h4><p><strong>作用</strong>：返回 ImageData 对象的高度，以像素计</p><p><strong>JavaScript 语法</strong>：<code>imgData.height</code></p><h4 id="_3-data" tabindex="-1">3. data <a class="header-anchor" href="#_3-data" aria-label="Permalink to &quot;3. data&quot;">​</a></h4><p><strong>作用</strong>：返回一个对象，其包含指定的 ImageData 对象的图像数据。</p><p>对于 ImageData 对象中的每个像素，都存在着四方面的信息，即 RGBA 值：</p><p>R - 红色(0-255)</p><p>G - 绿色(0-255)</p><p>B - 蓝色(0-255)</p><p>A - alpha 通道(0-255；0 是透明，255 是完全可见)</p><p>color/alpha 信息以数组形式存在，并存储于 ImageData 对象的 data 属性中。</p><p><strong>JavaScript 语法</strong>：<code>imgData.data</code></p><p><strong>参数值</strong></p><h3 id="方法-6" tabindex="-1">方法 <a class="header-anchor" href="#方法-6" aria-label="Permalink to &quot;方法&quot;">​</a></h3><h4 id="_1-createimagedata" tabindex="-1">1. createImageData() <a class="header-anchor" href="#_1-createimagedata" aria-label="Permalink to &quot;1. createImageData()&quot;">​</a></h4><p><strong>作用</strong>：创建新的空白 ImageData 对象。新对象默认像素值 transparent black。</p><p>对于 ImageData 对象中的每个像素，都存在着四方面的信息，即 RGBA 值：</p><p>R - 红色(0-255)</p><p>G - 绿色(0-255)</p><p>B - 蓝色(0-255)</p><p>A - alpha 通道(0-255；0 是透明，255 是完全可见)</p><p>因此，transparent black 表示(0,0,0,0)</p><p>color/alpha 信息以数组形式存在，并且由于数组包含了每个像素的四条信息，所以数组的大小是 ImageData 对象的四倍：width _ height _ 4。(获取数组大小有更简单的办法，就是使用 <code>ImageDataObject.data.length</code>)</p><p><strong>提示</strong>：操作完成数组的 color/alpha 信息后，您可以使用 <a href="#_3-putimagedata">putImageData()</a> 方法将图像数据拷贝回画布上。</p><p><strong>JavaScript 语法</strong></p><table><thead><tr><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>context.createImageData(width,height)</td><td>以指定的尺寸(像素)创建新的 ImageData 对象</td></tr><tr><td>context.createImageData(imageData)</td><td>创建与指定的另一个 ImageData 对象出现相同的新的 ImageData 对象(不会复制图像数据)</td></tr></tbody></table><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>width</td><td>ImageData 对象的宽度，以像素计</td></tr><tr><td>height</td><td>ImageData 对象的高度，以像素计</td></tr><tr><td>imageData</td><td>另一个 ImageData 对象</td></tr></tbody></table><h4 id="_2-getimagedata" tabindex="-1">2. getImageData() <a class="header-anchor" href="#_2-getimagedata" aria-label="Permalink to &quot;2. getImageData()&quot;">​</a></h4><p><strong>作用</strong>：返回 ImageData 对象，该对象拷贝了画布指定矩形的像素数据。</p><p><strong>注意</strong>：ImageData 对象不是图像，它规定了画布上一部分(矩形)，并保存了该矩形内每个像素的信息。</p><p><strong>JavaScript 语法</strong>：<code>context.getImageData(x, y, width, height);</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>x</td><td>开始复制的左上角位置的 x 坐标(以像素计)</td></tr><tr><td>y</td><td>开始复制的左上角位置的 y 坐标(以像素计)</td></tr><tr><td>width</td><td>要复制的矩形区域的宽度</td></tr><tr><td>height</td><td>要复制的矩形区域的高度</td></tr></tbody></table><h4 id="_3-putimagedata" tabindex="-1">3. putImageData() <a class="header-anchor" href="#_3-putimagedata" aria-label="Permalink to &quot;3. putImageData()&quot;">​</a></h4><p><strong>作用</strong>：将图像数据（从指定的 ImageData 对象）放回画布上。</p><p><strong>JavaScript 语法</strong>：<code>context.putImageData(imgData, x, y, dirtyX, dirtyY, dirtyWidth, dirtyHeight)</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>imgData</td><td>规定要放回画布上的 ImageData 对象。</td></tr><tr><td>x</td><td>ImageData 对象左上角的 x 坐标，以像素计。</td></tr><tr><td>y</td><td>ImageData 对象左上角的 y 坐标，以像素计。</td></tr><tr><td>dirtyX</td><td>可选。水平值(x)，以像素计，在画布上放置图像的位置。</td></tr><tr><td>dirtyY</td><td>可选。垂直值(y)，以像素计，在画布上放置图像的位置</td></tr><tr><td>dirtyWidth</td><td>可选。在画布上绘制图像所使用的宽度。</td></tr><tr><td>dirtyHeight</td><td>可选。在画布上绘制图像所使用的高度。</td></tr></tbody></table><h2 id="九、合成" tabindex="-1">九、合成 <a class="header-anchor" href="#九、合成" aria-label="Permalink to &quot;九、合成&quot;">​</a></h2><h3 id="属性-4" tabindex="-1">属性 <a class="header-anchor" href="#属性-4" aria-label="Permalink to &quot;属性&quot;">​</a></h3><h4 id="_1-globalalpha" tabindex="-1">1. globalAlpha <a class="header-anchor" href="#_1-globalalpha" aria-label="Permalink to &quot;1. globalAlpha&quot;">​</a></h4><p><strong>作用</strong>：设置或返回绘图的当前 alpha 或透明值(alpha 或 transparency)。</p><p>globalAlpha 属性值必须是介于 0.0（完全透明） 与 1.0（不透明） 之间的数字。</p><p><strong>默认值</strong>：1.0</p><p><strong>JavaScript 语法</strong>：<code>context.globalAlpha=number;</code></p><p><strong>属性值</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>number</td><td>透明值。必须介于 0.0(完全透明) 与 1.0(不透明) 之间</td></tr></tbody></table><h4 id="_2-globalcompositeoperation" tabindex="-1">2. globalCompositeOperation <a class="header-anchor" href="#_2-globalcompositeoperation" aria-label="Permalink to &quot;2. globalCompositeOperation&quot;">​</a></h4><p><strong>作用</strong>：设置或返回新图像如何绘制到已有的图像上。</p><p>新图像：您打算放置到画布上的绘图。</p><p>目标图像：您已经放置在画布上的绘图。</p><p><strong>默认值</strong>：source-over</p><p><strong>JavaScript 语法</strong>：<code>context.globalCompositeOperation=&quot;source-in&quot;;</code></p><p><strong>属性值</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>source-over</td><td>默认。在目标图像上显示源图像</td></tr><tr><td>source-atop</td><td>在目标图像顶部显示源图像。源图像位于目标图像之外的部分是不可见的。</td></tr><tr><td>source-in</td><td>在目标图像中显示源图像，只有目标图像之内的源图像部分会显示，目标图像是透明的</td></tr><tr><td>source-out</td><td>在目标图像之外显示源图像，只有目标图像之外的源图像部分会显示，目标图像是透明的</td></tr><tr><td>destination-over</td><td>在源图像上显示目标图像</td></tr><tr><td>destination-atop</td><td>在源图像顶部显示目标图像。目标图像位于源图像之外的部分是不可见的</td></tr><tr><td>destination-in</td><td>在源图像中显示目标图像。只有源图像之内的目标图像部分会被显示，源图像是透明的</td></tr><tr><td>destination-out</td><td>在源图像之外显示目标图像。只有源图像之外的目标图像部分会被显示，源图像是透明的。</td></tr><tr><td>lighter</td><td>显示源图像+目标图像</td></tr><tr><td>copy</td><td>显示源图像。忽略目标图像</td></tr><tr><td>xor</td><td>使用异或操作对源图像和目标图像进行组合。</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/xuchp/typora-pics/main/canvas/image-20240530142857949.png" alt="image-20240530142857949"></p><h2 id="十、其他" tabindex="-1">十、其他 <a class="header-anchor" href="#十、其他" aria-label="Permalink to &quot;十、其他&quot;">​</a></h2><h3 id="方法-7" tabindex="-1">方法 <a class="header-anchor" href="#方法-7" aria-label="Permalink to &quot;方法&quot;">​</a></h3><h4 id="_1-save" tabindex="-1">1. save() <a class="header-anchor" href="#_1-save" aria-label="Permalink to &quot;1. save()&quot;">​</a></h4><p><strong>作用</strong>：保存当前环境的状态</p><p>Canvas 状态存储在栈中，每当 save()方法被调用后，当前的状态就被推送到栈中保存。可以调用任意多次 save 方法</p><h4 id="_2-restore" tabindex="-1">2. restore() <a class="header-anchor" href="#_2-restore" aria-label="Permalink to &quot;2. restore()&quot;">​</a></h4><p><strong>作用</strong>：返回之前保存过的路径状态和属性</p><p>每一次调用 restore 方法，上一个保存的状态就从栈中弹出，所有设定都恢复。(类似数组的 pop())</p><h4 id="_3-createevent" tabindex="-1">3. createEvent() <a class="header-anchor" href="#_3-createevent" aria-label="Permalink to &quot;3. createEvent()&quot;">​</a></h4><h4 id="_4-getcontext" tabindex="-1">4. getContext() <a class="header-anchor" href="#_4-getcontext" aria-label="Permalink to &quot;4. getContext()&quot;">​</a></h4><p><strong>作用</strong>：返回一个对象，指出访问绘图功能必要的 API</p><p><strong>JavaScript 语法</strong>：<code>canvas.getContext(contextID)</code></p><h4 id="_5-todataurl" tabindex="-1">5. toDataURL() <a class="header-anchor" href="#_5-todataurl" aria-label="Permalink to &quot;5. toDataURL()&quot;">​</a></h4><p><strong>作用</strong>：返回 canvas 图像的 URL，常用于导出</p><p><strong>JavaScript 语法</strong>：<code>canvas.toDataURL(type,encoderOptions)</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>type</td><td>图片格式 默认 image/png,image/jpeg,image/webp</td></tr><tr><td>encoderOption</td><td>在指定图片格式为 image/jpeg 或 image/webp 的情况下,可以从 0 到 1 的区间内选择图片的质量 如果超出取值范围 将会使用默认值 0.92</td></tr></tbody></table>',375),n=[d];function s(h,i,l,p,c,g){return r(),a("div",null,n)}const m=t(o,[["render",s]]);export{u as __pageData,m as default};
