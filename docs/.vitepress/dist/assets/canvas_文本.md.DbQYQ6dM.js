import{_ as t,c as r,o as e,a8 as a}from"./chunks/framework.Uk78KS4B.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"canvas/文本.md","filePath":"canvas/文本.md"}'),d={name:"canvas/文本.md"},o=a('<h3 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h3><h4 id="_1-font" tabindex="-1">1. font <a class="header-anchor" href="#_1-font" aria-label="Permalink to &quot;1. font&quot;">​</a></h4><p><strong>作用</strong>：设置或返回文本内容当前的字体属性</p><p><strong>默认值</strong>：10px sans-serif</p><p><strong>JavaScript 语法</strong>：<code>context.font = &quot;italic small-caps bond 12px arial&quot;;</code></p><p><strong>属性值</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>font-style</td><td>规定字体的样式。可能的值<br>- normal <br>- italic<br>- oblique</td></tr><tr><td>font-variant</td><td>规定字体变体。可能的值：<br>normal<br>small-caps</td></tr><tr><td>font-weight</td><td>规定字体的粗细。可能的值<br> normal<br>bold<br>bolder<br>lighter<br>100<br>200<br>300<br>400<br>500<br>600<br>700<br>800<br>900</td></tr><tr><td>font-size/line-height</td><td>规定字号和行高，以像素计</td></tr><tr><td>font-family</td><td>规定字体系列</td></tr><tr><td>caption</td><td>使用标题控制的字体(比如按钮、下拉列表等)。</td></tr><tr><td>icon</td><td>使用用于标记图标的字体</td></tr><tr><td>menu</td><td>使用用于菜单中的字体(下拉列表和菜单列表)</td></tr><tr><td>message-box</td><td>使用用于对话框的字体</td></tr><tr><td>small-caption</td><td>使用用于标记小型控件的字体</td></tr><tr><td>status-bar</td><td>使用用于窗口状态栏的字体</td></tr></tbody></table><h4 id="_2-textalign" tabindex="-1">2. textAlign <a class="header-anchor" href="#_2-textalign" aria-label="Permalink to &quot;2. textAlign&quot;">​</a></h4><p><strong>作用</strong>：设置或返回文本内容的当前对齐方式</p><p>通常，文本会从指定位置<strong>开始</strong>，不过，如果您设置为 <code>textAlign=&quot;right&quot;</code>并将文本放置到 位置 150，那么会在位置 150<strong>结束</strong>。</p><p><strong>提示</strong>：请使用 <a href="#_1-filltext">fillText()</a> 或 <a href="#_2-stroketext">strokeText()</a> 方法在画布上实际地绘制并定位文本。</p><p><img src="https://raw.githubusercontent.com/xuchp/typora-pics/main/canvas/u%253D2622540504%252C2116527914%2526fm%253D253%2526fmt%253Dauto%2526app%253D138%2526f%253DPNG.png" alt="img"></p><p><strong>默认值</strong>：start</p><p><strong>JavaScript 语法</strong>：<code>context.textAlign = &quot;center | end | left | right | start&quot;;</code></p><p><strong>属性值</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>start</td><td>默认。文本在指定的位置开始</td></tr><tr><td>end</td><td>文本在指定的位置结束</td></tr><tr><td>center</td><td>文本的中心被放置在指定的位置</td></tr><tr><td>left</td><td>文本在指定的位置开始</td></tr><tr><td>right</td><td>文本在指定的位置结束</td></tr></tbody></table><h4 id="_3-textbaseline" tabindex="-1">3. textBaseline <a class="header-anchor" href="#_3-textbaseline" aria-label="Permalink to &quot;3. textBaseline&quot;">​</a></h4><p><strong>作用</strong>： 设置或返回在绘制文本时使用的当前文本基线。</p><p><img src="https://raw.githubusercontent.com/xuchp/typora-pics/main/canvas/img_textbaseline.gif" alt="textBaseline illustration"></p><p><strong>注意</strong>： <a href="#1_filltext">fillText()</a> 或 <a href="#_2-stroketext">strokeText()</a> 方法在画布上定位文本时，将使用指定的 textBaseline 值</p><p><strong>默认值</strong>:alphabetic</p><p><strong>JavaScript 语法</strong>：<code>context.textBaseline = &quot;alphabetic | top | hanging | middle | ideographic | bottom&quot;;</code></p><p><strong>属性值</strong></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>alphabetic</td><td>默认。文本基线是普通的字母基线</td></tr><tr><td>top</td><td>文本基线是 em 方框的顶端</td></tr><tr><td>hanging</td><td>文本基线是悬挂基线</td></tr><tr><td>middle</td><td>文本基线是 em 方框的正中</td></tr><tr><td>ideographic</td><td>文本基线是表意基线</td></tr><tr><td>bottom</td><td>文本基线是 em 方框的底端</td></tr></tbody></table><h3 id="文本方法" tabindex="-1">文本方法 <a class="header-anchor" href="#文本方法" aria-label="Permalink to &quot;文本方法&quot;">​</a></h3><h4 id="_1-filltext" tabindex="-1">1. fillText() <a class="header-anchor" href="#_1-filltext" aria-label="Permalink to &quot;1. fillText()&quot;">​</a></h4><p><strong>作用</strong>： 在画布上绘制&quot;被填充的&quot;文本。默认的颜色是黑色</p><p><strong>提示</strong>：请使用 <a href="#_1-font">font()</a> 属性来定义字体和字号，并使用 <a href="./颜色、样式和阴影.html#_1-fillstyle">fillStyle</a> 属性以另一种颜色/渐变来渲染文本。</p><p><strong>JavaScript 语法</strong>：<code>context.fillText(text, x, y, maxWidth);</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>text</td><td>规定在画布上输出的文本</td></tr><tr><td>x</td><td>开始绘制文本的 x 坐标的位置(相对于画布)</td></tr><tr><td>y</td><td>开始绘制文本的 y 坐标的位置(相对于画布)</td></tr><tr><td>maxWidth</td><td>可选。允许的最大文本宽度，以像素计。</td></tr></tbody></table><h4 id="_2-stroketext" tabindex="-1">2. strokeText() <a class="header-anchor" href="#_2-stroketext" aria-label="Permalink to &quot;2. strokeText()&quot;">​</a></h4><p><strong>作用</strong>：在画布上绘制文本（无填充色）。文本的默认颜色是黑色。</p><p><strong>提示</strong>：请使用 <a href="#_1-font">font()</a> 属性来定义字体和字号，并使用 <a href="./颜色、样式和阴影.html#_1-fillstyle">fillStyle</a> 属性以另一种颜色/渐变来渲染文本。</p><p><strong>JavaScript 语法</strong>：<code>context.strokeText(text, x, y, maxWidth);</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>text</td><td>规定在画布上输出的文本</td></tr><tr><td>x</td><td>开始绘制文本的 x 坐标的位置(相对于画布)</td></tr><tr><td>y</td><td>开始绘制文本的 y 坐标的位置(相对于画布)</td></tr><tr><td>maxWidth</td><td>可选。允许的最大文本宽度，以像素计。</td></tr></tbody></table><h4 id="_3-measuretext" tabindex="-1">3. measureText() <a class="header-anchor" href="#_3-measuretext" aria-label="Permalink to &quot;3. measureText()&quot;">​</a></h4><p><strong>作用</strong>：返回包含指定文本宽度的对象。</p><p><strong>提示</strong>：如果您需要在文本向画布输出之前，就了解文本的宽度，那么请使用该方法</p><p><strong>JavaScript 语法</strong>：<code>context.measureText(text).width</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>text</td><td>要测量的文本</td></tr></tbody></table>',43),n=[o];function s(l,i,h,p,c,g){return e(),r("div",null,n)}const f=t(d,[["render",s]]);export{b as __pageData,f as default};
