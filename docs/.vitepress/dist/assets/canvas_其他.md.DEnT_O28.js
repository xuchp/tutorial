import{_ as t,c as a,o as e,a8 as r}from"./chunks/framework.Uk78KS4B.js";const v=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"canvas/其他.md","filePath":"canvas/其他.md"}'),o={name:"canvas/其他.md"},n=r('<h3 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h3><h4 id="_1-save" tabindex="-1">1. save() <a class="header-anchor" href="#_1-save" aria-label="Permalink to &quot;1. save()&quot;">​</a></h4><p><strong>作用</strong>：保存当前环境的状态</p><p>Canvas 状态存储在栈中，每当 save()方法被调用后，当前的状态就被推送到栈中保存。可以调用任意多次 save 方法</p><h4 id="_2-restore" tabindex="-1">2. restore() <a class="header-anchor" href="#_2-restore" aria-label="Permalink to &quot;2. restore()&quot;">​</a></h4><p><strong>作用</strong>：返回之前保存过的路径状态和属性</p><p>每一次调用 restore 方法，上一个保存的状态就从栈中弹出，所有设定都恢复。(类似数组的 pop())</p><h4 id="_3-createevent" tabindex="-1">3. createEvent() <a class="header-anchor" href="#_3-createevent" aria-label="Permalink to &quot;3. createEvent()&quot;">​</a></h4><h4 id="_4-getcontext" tabindex="-1">4. getContext() <a class="header-anchor" href="#_4-getcontext" aria-label="Permalink to &quot;4. getContext()&quot;">​</a></h4><p><strong>作用</strong>：返回一个对象，指出访问绘图功能必要的 API</p><p><strong>JavaScript 语法</strong>：<code>canvas.getContext(contextID)</code></p><h4 id="_5-todataurl" tabindex="-1">5. toDataURL() <a class="header-anchor" href="#_5-todataurl" aria-label="Permalink to &quot;5. toDataURL()&quot;">​</a></h4><p><strong>作用</strong>：返回 canvas 图像的 URL，常用于导出</p><p><strong>JavaScript 语法</strong>：<code>canvas.toDataURL(type,encoderOptions)</code></p><p><strong>参数值</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>type</td><td>图片格式 默认 image/png,image/jpeg,image/webp</td></tr><tr><td>encoderOption</td><td>在指定图片格式为 image/jpeg 或 image/webp 的情况下,可以从 0 到 1 的区间内选择图片的质量 如果超出取值范围 将会使用默认值 0.92</td></tr></tbody></table>',16),s=[n];function c(d,i,h,p,_,l){return e(),a("div",null,s)}const m=t(o,[["render",c]]);export{v as __pageData,m as default};
